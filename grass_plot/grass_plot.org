#+OPTIONS:    H:3 num:nil toc:2 \n:nil @:t ::t |:t -:t f:t *:t TeX:t LaTeX:t skip:t d:(HIDE) tags:not-in-toc
#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate 
#+TITLE:    GRASS_PLOT
#+AUTHOR:    teoten
#+EMAIL:     teoten@gmail.com
#+LANGUAGE:   en
#+STYLE:      <style type="text/css">#outline-container-introduction{ clear:both; }</style>
#+BABEL: :exports both
#+PROPERTY: header-args :exports both


* A plot with the grass shape

Part of doing a PhD includes artistic work. It is very useful to learn
proper tools for editing and manipulating images, in order to improve or
support the visualisations created by the data. As part of this, for some
work I got the idea to plot the concentrations of elements in a 
proportional relation, directly over a grass. Here is what I got.

** Grass shape

To obtain the shape of the grass, I basically google couple of images that
could represent well the shapes of the shoot and root parts of the grass.
Then, using [[https://www.gimp.org/][GIMP]] I draw the shape and export the path as a SVG file. Here
is how it looks.

#+NAME:   fig:1
#+ATTR_HTML: :width 80% :height 80%
[[./gimp.png]]

** Extracting the points in R

Once the points are in a SVG file, it is very easy to extract the points
as coordinates using R-packages =XML=

#+BEGIN_SRC R :session
   library(XML)
   library(stringr)

   doc <- htmlParse('coord_root')

   ## Extract the coordinates, as strings
   p <- xpathSApply(doc, "//path", xmlGetAttr, "d")
   ## Remove excess of characters
   p <- str_remove_all(p, '[MC]')

   ## Convert them to numbers
   points <- lapply(strsplit(p, " "),
                    function(u) 
                        matrix(as.numeric(unlist(strsplit(u, ","))),
                               ncol=2,
                               byrow=TRUE) )

   root <- as.data.frame(points)
   ## Repeat the same for shoot
   
   shoot$part <- 'shoot'
   root$part <- 'root'
   grass <- rbind(root, shoot)

   ## Fix the names and save as CSV
   names(grass) <- c('y', 'x', 'part')
   write.table(grass, 'grass_coords.csv', sep = ',', row.names = F)
#+END_SRC

Here is how it looks at first sight

#+BEGIN_SRC R :session :file prev.png :results graphics file :exports both
  library(ggplot2)
  grass_plot <- read.csv('grass_coords.csv')
  
  ggplot(grass_plot, aes(x, y)) +
    geom_polygon(aes(fill = part))
#+END_SRC

#+RESULTS:
[[file:prev.png]]

** Ploting the data

#+BEGIN_SRC R :session :export none
  library(tidyverse)
  library(cowplot)
  library('RColorBrewer')
  
  load('../ignore/Phytostabilization/grasses_all.RData')
  dat_cont <- data_all 
  grass_coords <- read.csv('grass_coords.csv', header = T)
  
  hydrop <- read_csv('../ignore/ICP-Plant.csv')
  (hydrop <- hydrop %>%
       filter(Sp == 'A' | Sp == 'F') %>%
       remove_missing())
  hydrop$Pb <- 0
  hydrop$Cd <- 0
  hydrop$As <- 0
  dat_hydrop <- hydrop 

  rm(data_all, hydrop)

  #grass_coords  # Coordinates of the grass 
  #dat_hydrop    # Data from hydroponics
  #dat_cont      # Data from grass experiment                   
#+END_SRC

We want to fill the grass shapes with the concentrations of elements that 
we found in the [[https://github.com/teoten108/visualizations/blob/master/Pythostabilization/Pythostabilization.org][pythostabilization]] experiment.
This data set contains the element composition of plants growing in a
contaminated soil. We also would like to compare this with, say, normal 
plants. For that, we are going to use data obtained from an experiment
where plants of /A. capillaris/ were grown in hydroponics under perfect
nutrient conditions. 

Here is a sample of the data

#+BEGIN_SRC R :session :results output code :exports both
   dat_hydrop
#+END_SRC

To start mapping the data into our grass shape, we need to join the tables
containing the data with the plot coordinates. Also, as we want to find
the differences between each element, we are going to change the format,
where each column contains an element, into a single column, having each
element as a categorical variable. Here is how it looks

#+BEGIN_SRC R :session :results output code :exports both
  dat_hydrop <- select(dat_hydrop, Part:Cd) %>%
       pivot_longer(cols = B:Cd,
                    names_to = 'element',
                    values_to = 'concentration') %>%
       mutate(part = ifelse(Part == 'R', 'root', 'shoot')) %>%
      select(-Part)
  dat_hydrop$source <- "hydroponics"

  dat_cont <- dat_cont %>%
      filter(Specie == 'A') %>%
      select(Na.b:Ba.a) %>%
      pivot_longer(everything(),
                   names_to = 'elements',
                   values_to = 'concentration') %>%
      separate(elements, into = c("element", "part"), sep = "\\.") %>%
      mutate(part = ifelse(part == 'b', 'root', 'shoot')) %>%
      filter(element %in% unique(dat_hydrop$element))
  dat_cont$source <- "contaminated"

  dat_hydrop <- filter(dat_hydrop, element %in% unique(dat_cont$element))

  dat_grasses <- full_join(dat_cont, dat_hydrop)
  ## Now here is all the data together

  ## Add the coordinates
  dat_map <- left_join(dat_grasses, grass_coords, by = 'part')
  dat_map
#+END_SRC

Now we can create a first plot using (dat_map)

#+BEGIN_SRC R :session :file GP1.png :results graphics file :exports both
  ## FIRST PLOT
  filter(dat_map, source == "hydroponics") %>%
   ggplot(aes(x, y, group = part)) +
      geom_polygon(aes(fill = concentration))  +
       facet_grid(~element) +
       theme_bw() +
       labs(x = NULL, y = NULL) +
       theme(title = element_text(face="bold", size = 15),
             axis.title.x=element_blank(),
             axis.text.x=element_blank(),
             axis.ticks.x=element_blank(),
             axis.title.y=element_blank(),
             axis.text.y=element_blank(),
             axis.ticks.y=element_blank())
#+END_SRC

#+RESULTS:
[[file:GP1.png]]

Due to the big differences in the concentration values of each element,
it is difficult to see when certain values are too low or too high.
We will need to try other aproaches.

*** PLOT IN PERCENTAGES

One way could be to plot, instead of the concentrations of elements, the
percentage, having as a hundred the sum of all the elements involved.
This can be tricky when adding or removing elements, thus the best approach
would be to create a function that do it automatically.

#+BEGIN_SRC R :session
  grass_plot_percent <- function(.df){
      ## Get totals
      totals <- group_by(.df, source, part) %>%
          summarise(total = sum(concentration))
      ## Get percentages
      dat_percent <- left_join(.df, totals)
      dat_percent <- mutate(dat_percent,
                            percent = concentration/total,
                            percent = percent*100)
      ## Add coordinates 
      dat_percent <- left_join(dat_percent, grass_coords, by = 'part')
      ## Modify colors palette 
      my.palette <- colorRampPalette(rev(brewer.pal(5, "Spectral")))  
      sc <- scale_fill_gradientn(name = "Proportion",
                                 colours = my.palette(100))                                
      ## PLOT
      pl <- ggplot(dat_percent, aes(x, y, group = part)) +
          geom_polygon(aes(fill = percent))  +
          facet_grid(~element) +
          theme_bw() +
          labs(x = NULL, y = NULL) +
          theme(title = element_text(face="bold", size = 15),
                axis.title.x=element_blank(),
                axis.text.x=element_blank(),
                axis.ticks.x=element_blank(),
                axis.title.y=element_blank(),
                axis.text.y=element_blank(),
                axis.ticks.y=element_blank()) + sc
      pl
  }
#+END_SRC

Now the function will work considering that the data frame contains the
columns =part= and =source= and that we are grouping by this both of them.
Also we should considering keeping the columns =element= and 
=concentration= with such names.

Here is a plot applying the function

#+BEGIN_SRC R :session 
  ## Get mean values by element
  mean_hydrop <- group_by(dat_hydrop, part, source, element) %>%
      summarise(concentration = mean(concentration))
  mean_cont <- group_by(dat_cont, part, source, element) %>%
      summarise(concentration = mean(concentration))
  
  png('GP2.png', width = 750)
  plot_grid(
  grass_plot_percent(mean_hydrop) + labs(title = 'Hydroponics'),
  grass_plot_percent(mean_cont) + labs(title = 'Contaminated'),
  ncol = 1, nrow = 2)
  dev.off()
#+END_SRC

#+NAME:   fig:gp2
#+ATTR_HTML: :width 100% :height 100%
[[./GP2.png]]

The plot is still not so accurate, some elements have very low 
concentrations, even when given in percentages, and each generated plot
uses different scale of the colours. However, we can already see certain
differences:
    - *K* Has quite high concentrations in ideal conditions (hydroponics). It makes sense as it is considered a macro nutrient. However, when contamination influences the plant, the up-take of K reduces.
    - *Fe* in the roots of contaminated plants increases considerably
    - Concentrations of *Zn* also increased in the contaminated plants. Zinc is one of the main contaminants in the site.

Let's reduce the percentage possibilities and plot selected elements

#+BEGIN_SRC R :session :results output code :exports both
  dat_grasses %>%
      group_by(part, source, element) %>%
      summarise(Mean = mean(concentration),
                Max = max(concentration),
                Min = min(concentration)) %>%
      arrange(Mean) %>%
      print(n = Inf)
#+END_SRC

Now we can make a clear idea of which elements are in higher concentrations,
and how to group them. Let's start by the main nutrients

#+BEGIN_SRC R :session :file GP3.png :results graphics file :exports both
  nutrients <- c('K', 'Ca', 'Fe', 'Mg', 'Na')

  gp_Hyd_nut <- filter(mean_hydrop, element %in% nutrients) %>%
      grass_plot_percent()
  gp_Cont_nut <- filter(mean_cont, element %in% nutrients) %>%
      grass_plot_percent()

  plot_grid(gp_Hyd_nut, gp_Cont_nut, nrow = 2)
#+END_SRC

Contaminants

#+BEGIN_SRC R :session :file GP4.png :results graphics file :exports both
  contaminants <- c('Pb', 'Zn', 'Cd', 'Cu', 'Mn')

  gp_Hyd_cont <- filter(mean_hydrop, element %in% contaminants) %>%
      grass_plot_percent()
  gp_Cont_cont <- filter(mean_cont, element %in% contaminants) %>%
      grass_plot_percent()

  plot_grid(gp_Hyd_cont, gp_Cont_cont, nrow = 2)
#+END_SRC


*** PLOT PER ELEMENT
Another way would be to plot each element on a separated area.

#+BEGIN_SRC R :session :file GP5.png :results graphics file :exports both
   grass_plot_el <- function(elmnt = 'Pb'){
      my.palette <- colorRampPalette(rev(brewer.pal(10, "Spectral")))  
      sc <- scale_fill_gradientn(name = "Concentration",
                                colours = my.palette(150))
      filter(dat_map, element == ensym(elmnt)) %>%
          ggplot(aes(x, y, group = part)) +
          geom_polygon(aes(fill = concentration)) +
          facet_grid(~source) +
          theme_bw() +
          labs(title = elmnt,
               x = NULL, y = NULL) +
          theme(title = element_text(face="bold", size = 15),
                strip.text.x = element_text(size = 14, face = 'bold'),
                axis.title.x=element_blank(),
                axis.text.x=element_blank(),
                axis.ticks.x=element_blank(),
                axis.title.y=element_blank(),
                axis.text.y=element_blank(),
                axis.ticks.y=element_blank()) + sc
   }

   grass_plot_el()
#+END_SRC

Let's choose the main nutrients and the main contaminants to plot

#+BEGIN_SRC R :session
   target_elements <- c('K','Ca','Cu', 'Fe',
                        'Mn','Cd', 'Pb', 'Zn')
   
   target_plot <- lapply(target_elements, grass_plot_el)

   png('GP6.png', width = 680, height = 750)
   plot_grid(plotlist = target_plot, ncol = 2)
   dev.off()
#+END_SRC

#+NAME:   fig:gp6
#+ATTR_HTML: :width 100% :height 100%
[[./GP6.png]]

